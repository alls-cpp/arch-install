#!/usr/bin/env bash

RED='\033[0;31m'
BLUE='\033[0;36m'
NC='\033[0m' # no color

function ProgressBar {
    let _progress=(${1}*100/${2}*100)/100
    let _done=(${_progress}*4)/10
    let _left=40-$_done
    _fill=$(printf "%${_done}s")
    _empty=$(printf "%${_left}s")
    printf "\rProgress : [${_fill// /#}${_empty// /-}] ${_progress}%%"
}

function show_help {
    echo "Usage: cp_compare solution1 solution2 generator num_tests"
    echo ""
    echo "solution1, solution2 and generator are respectively the names of c++ files. Compares the outputs of two solutions of a problem, checking if they give the same outputs."
    echo ""
    echo "Options:"
    echo "  -h, --help  Show this help message and exit."
}

# Check for help option
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    show_help
    exit 0
fi

# Check for correct number of arguments
if [ "$#" -ne 4 ]; then
    echo -e "${RED}Error: Incorrect number of parameters.${NC}"
    show_help
    exit 1
fi

rm $1 $2 $3 2> /dev/null
g++ -Ofast $1.cpp -o $1
g++ -Ofast $2.cpp -o $2
g++ -Ofast $3.cpp -o $3
if [ ! -f $1 ] || [ ! -f $2 ] || [ ! -f $3 ]; then
    exit 0
fi
for ((testNum=0;testNum<$4;testNum++))
do
    ProgressBar ${testNum} ${4}
    ./$3 > input
    ./$2 < input > out2
    ./$1 < input > out1
    if !(cmp -s "out1" "out2")
    then
        echo ""
        echo -e "${RED}Error found!"
        echo -e "${BLUE}Input:${NC}"
        cat input
        echo -e "${BLUE}$1 output:${NC}"
        cat out1
        echo -e "${BLUE}$2 output:${NC}"
        cat out2
        rm $1 $2 $3 out1 out2
        exit 0
    fi
done
echo ""
echo -e "${BLUE}Passed $4 tests!!!${NC}"
rm $1 $2 $3 out1 out2
exit 0
